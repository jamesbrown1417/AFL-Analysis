---
title: "Draft and FA Report"
subtitle: "2022 Season"
format:
  html:
      df-print: kable
      theme: cosmo
      self-contained: true
      toc: true
      fig-width: 8
      fig-height: 6
editor: visual
---

```{r}
#| label: load-packages-and-data
#| include: false
#| echo: false

library(tidyverse)
library(rvest)
`%notin%` <- Negate(`%in%`)

draft_recap <- read_csv("../../../Data/CSV-files/draft_recap_2022.csv")
combined_stats_table <- read_rds("../../../Data/RDS-files/combined_stats_table_2022.rds")
combined_stats_table_2021 <- read_rds("../../../Data/RDS-files/combined_stats_table_2021.rds")

combined_stats_table <- combined_stats_table %>% filter(round_number < "Round 18")
```

```{r}
#| label: data-setup
#| include: false
#| echo: false

top_defenders <-
  combined_stats_table %>%
  filter(fantasy_defender_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(TOG > 50) %>%
  filter(games_played >= 5) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  head(48) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1]) %>%
  mutate(across(where(is.numeric), ~round(., 2)))

top_midfielders <-
  combined_stats_table %>%
  filter(fantasy_midfield_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(!fantasy_defender_status) %>%
  filter(!fantasy_ruck_status) %>%
  filter(TOG > 50) %>%
  filter(games_played >= 5) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  head(64) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1]) %>%
  mutate(across(where(is.numeric), ~round(., 2)))

top_rucks <-
  combined_stats_table %>%
  filter(fantasy_ruck_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(!fantasy_defender_status) %>%
  filter(TOG > 50) %>%
  filter(games_played >= 5) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  head(16) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1]) %>%
  mutate(across(where(is.numeric), ~round(., 2)))

top_forwards <-
  combined_stats_table %>%
  filter(fantasy_forward_status) %>%
  filter(TOG > 50) %>%
  filter(games_played >= 5) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  head(48) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1]) %>%
  mutate(across(where(is.numeric), ~round(., 2)))

all_player_rankings <-
  bind_rows(top_defenders, top_midfielders, top_rucks, top_forwards) %>%
  group_by(player_name) %>%
  filter(z_score == max(z_score)) %>%
  ungroup() %>%
  arrange(desc(z_score)) %>%
  mutate(ranking = row_number()) %>%
  relocate(ranking, .after = player_name) %>%
  mutate(across(where(is.numeric), ~round(., 2)))
```

```{r}
#| echo: false
#| include: false

best_draft_picks <-
  all_player_rankings %>%
  left_join(draft_recap) %>%
  filter(!is.na(pick)) %>%
  mutate(difference = pick - ranking) %>%
  arrange(desc(difference))

```

```{r}
#| echo: false
#| include: false

worst_draft_picks <-
combined_stats_table %>%
  filter(player_name %in% draft_recap$player_name)

# Defender
top_defenders_worst <-
  worst_draft_picks %>%
  filter(fantasy_defender_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(TOG > 50) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1])

# Midfield
top_midfielders_worst <-
  worst_draft_picks %>%
  filter(fantasy_midfield_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(!fantasy_defender_status) %>%
  filter(!fantasy_ruck_status) %>%
  filter(TOG > 50) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1])
# Ruck
top_rucks_worst <-
  worst_draft_picks %>%
  filter(fantasy_ruck_status) %>%
  filter(!fantasy_forward_status) %>%
  filter(!fantasy_defender_status) %>%
  filter(TOG > 50) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1])

# Forward
top_forwards_worst <-
  worst_draft_picks %>%
  filter(fantasy_forward_status) %>%
  filter(TOG > 50) %>%
  group_by(player_name) %>%
  summarise(avg_score = mean(fantasy_points, na.rm = TRUE), games_played = max(games_played)) %>%
  arrange(desc(avg_score)) %>%
  ungroup() %>%
  mutate(mean_position_score = mean(avg_score),
         z_score = scale(avg_score)[,1])

# Combine into 1 to get redraft ranking
all_player_rankings_worst <-
  bind_rows(top_defenders_worst, top_midfielders_worst, top_rucks_worst, top_forwards_worst) %>%
  group_by(player_name) %>%
  filter(z_score == max(z_score)) %>%
  ungroup() %>%
  arrange(desc(z_score)) %>%
  mutate(ranking = row_number())

# Get actual draft position
worst_draft_picks <-
  all_player_rankings_worst %>%
  left_join(draft_recap) %>%
  mutate(difference = pick - ranking) %>%
  arrange(difference) %>%
  mutate(avg_score = round(avg_score, 2),
         z_score = round(z_score, 2))

```

```{r}
#| echo: false
#| include: false

# Create draft round variable
rounds <-
  c(
    rep(1, 8),
    rep(2, 8),
    rep(3, 8),
    rep(4, 8),
    rep(5, 8),
    rep(6, 8),
    rep(7, 8),
    rep(8, 8),
    rep(9, 8),
    rep(10, 8),
    rep(11, 8),
    rep(12, 8),
    rep(13, 8),
    rep(14, 8),
    rep(15, 8),
    rep(16, 8),
    rep(17, 8),
    rep(18, 8),
    rep(19, 8),
    rep(20, 8),
    rep(21, 8),
    rep(22, 8)
  )

draft_recap <-
  draft_recap %>%
  mutate(round = rounds)

# Get best draft pick by round
best_pick_by_round <-
  draft_recap %>%
  left_join(all_player_rankings %>% select(player_name, ranking)) %>%
  group_by(round) %>%
  filter(ranking == min(ranking, na.rm = TRUE))

# Get worst draft pick by round
worst_pick_by_round <-
  draft_recap %>%
  left_join(all_player_rankings_worst %>% select(player_name, ranking)) %>%
  group_by(round) %>%
  filter(ranking == max(ranking, na.rm = TRUE))

```

```{r}
#| echo: false
#| include: false

# Web scrape FA transactions from HTML files returned by selenium python script

##%######################################################%##
#                                                          #
####             Read in HTML of team pages             ####
#                                                          #
##%######################################################%##

#===============================================================================
# Get list of files in Data/HTML-files folder
#===============================================================================

transaction_files <- dir("../../../Data/HTML-files/transactions")
transaction_files <- sort(transaction_files)

#===============================================================================
# Create function that reads html and outputs players table
#===============================================================================

get_transactions <- function(html_path) {
  # Read HTML from path
  full_path <- paste("../../../Data/HTML-files/transactions/", html_path, sep = "")
  html_source <- read_html(full_path)
  
  # Create players vector and return
  transactions <-
    html_source %>%
    html_elements(".hJZdqq") %>%
    html_text2()
  
  return(transactions)
}

##%######################################################%##
#                                                          #
####         Get list of scraped text (in form          ####
####       of a character vector) for each round        ####
#                                                          #
##%######################################################%##

transactions_by_round <- map(transaction_files, get_transactions)

##%######################################################%##
#                                                          #
####      Function to extract transaction details       ####
#                                                          #
##%######################################################%##

extract_transaction <- function(transaction_vector) {
  
# Process Strings
transaction_vector <- str_remove_all(transaction_vector, "(\n)|(Uncertain)|(the Free Agent:)|(Close Circle Logo)|(Transactions)|(\\.)|(Injured)|(the Restricted Free Agent)")
transaction_vector <- str_replace_all(transaction_vector, "(Defender)|(Forward)|(Midfielder)|(Ruck)|(:)", " ")
transaction_vector <- str_replace_all(transaction_vector, "(Def)|(Fwd)|(Mid)|(Ruck)|(:)", " ")
transaction_vector <- str_replace_all(transaction_vector, "/[ ]{1,}[ ]", "")
transaction_vector <- str_replace_all(transaction_vector, "[ ]{2,}", " ")
transaction_vector <- transaction_vector[str_detect(transaction_vector, "initiated and traded", negate = TRUE)]

# Extract Dates
dates <- str_extract_all(transaction_vector, "^.* 2022") %>% str_replace_all(" ", "-")

# Extract Team
team <- str_extract_all(transaction_vector, "(?<=2022)[A-Za-z4 ']{5,31}(?= selected| delisted)")

# Get Selected Players
selected <- str_extract_all(transaction_vector, "(?<=selected )[A-Za-z '-]{5,30}(?= And | $)")
selected[sapply(selected, is_empty)] <- NA

# Get Delisted Players
delisted <- str_extract_all(transaction_vector, "(?<=delisted )[A-Za-z '-]{5,30}(?= $)")
delisted[sapply(delisted, is_empty)] <- NA

# Create Output Tibble
selected <- tibble(date = dates, team = unlist(team), player_name = unlist(selected), type = "selected")
delisted <- tibble(date = dates, team = unlist(team), player_name = unlist(delisted), type = "delisted")
transaction_df <- bind_rows(selected, delisted) %>% filter(!is.na(player_name))
transaction_df$date <- as.Date(transaction_df$date, "%d-%B-%Y")

return(transaction_df)

}

##%######################################################%##
#                                                          #
####   Apply function to extract transasction details   ####
####      to list of transaction character vectors      ####
#                                                          #
##%######################################################%##

all_transactions <- map(transactions_by_round, extract_transaction)
all_transactions <- bind_rows(all_transactions)

##%######################################################%##
#                                                          #
####          Add Stats to transactions table           ####
#                                                          #
##%######################################################%##

# Get averages
fantasy_averages <-
combined_stats_table %>%
  filter(round_number < "Round 18") %>%
  filter(TOG > 50) %>%
  summarise(`Avg Points` = mean(fantasy_points), games_played = max(games_played)) %>%
  mutate(player_name = str_replace(player_name, "\\.", "")) %>%
  mutate(player_name = str_replace(player_name, "Paddy McCartin", "Patrick McCartin")) %>%
  mutate(player_name = str_replace(player_name, "Josh Rachele", "Joshua Rachele"))

# Join with main table
all_transactions <-
  all_transactions %>%
  left_join(fantasy_averages)

# Add Player Rankings
all_transactions <-
all_transactions %>%
  left_join(all_player_rankings[, c("player_name", "ranking", "z_score")])
```


# 10 Best Draft Picks

```{r}
#| echo: false

best_draft_picks %>%
  select(
    Player = player_name,
    Team = team,
    Avg = avg_score,
    `Z-Score` = z_score,
    Games = games_played,
    Pick = pick,
    Rank = ranking,
    Diff = difference
  ) %>%
  head(10)

```

# Best Draft Picks By Round

```{r}
#| echo: false

best_pick_by_round %>%
  select(
    Round = round,
    Player = player_name,
    Team = team,
    Pick = pick,
    Rank = ranking
  )

```

# 10 Worst Draft Picks

```{r}
#| echo: false

worst_draft_picks %>%
  select(
    Player = player_name,
    Team = team,
    Avg = avg_score,
    `Z-Score` = z_score,
    Games = games_played,
    Pick = pick,
    Rank = ranking,
    Diff = difference
  ) %>%
  head(10)

```

# Worst Draft Picks By Round

```{r}
#| echo: false

worst_pick_by_round %>%
  select(
    Round = round,
    Player = player_name,
    Team = team,
    Pick = pick,
    Rank = ranking
  )

```

# Biggest Changes in Average Compared to 2021 Season

##### Min 5 games played in both seasons, injury affected scores (\<50 % TOG) excluded

```{r}
#| include: false

avgs_2022 <- 
combined_stats_table %>%
filter(TOG > 50) %>%
filter(games_played >= 5) %>%
  summarise(avg_score_2022 = mean(fantasy_points, na.rm = TRUE)) %>%
  arrange(desc(avg_score_2022))
  
avgs_2021 <- 
combined_stats_table_2021 %>%
filter(TOG > 50) %>%
filter(games_played >= 5) %>%
  summarise(avg_score_2021 = mean(fantasy_points, na.rm = TRUE)) %>%
  arrange(desc(avg_score_2021))

comparison <-
  full_join(avgs_2022, avgs_2021) %>%
  mutate(difference = avg_score_2022 - avg_score_2021)

```

::: panel-tabset
## Improved

```{r}
#| echo: false
#| warning: false
#| message: false

comparison %>%
  left_join(draft_recap) %>%
  filter(!is.na(pick)) %>%
  arrange(desc(difference)) %>%
  transmute(Player = player_name,
            Pick = pick,
            Team = team,
         `2022 Avg` = round(avg_score_2022, 2),
         `2021 Avg` = round(avg_score_2021, 2),
         Diff = round(difference, 2)) %>%
  head(20)
```

## Regressed

```{r}
#| echo: false
#| warning: false
#| message: false

comparison %>%
  left_join(draft_recap) %>%
  filter(!is.na(pick)) %>%
  arrange(difference) %>%
  transmute(Player = player_name,
            Pick = pick,
            Team = team,
         `2022 Avg` = round(avg_score_2022, 2),
         `2021 Avg` = round(avg_score_2021, 2),
         Diff = round(difference, 2)) %>%
  head(20)
```
:::

# Free Agency Analysis

## Total Transactions By Team

```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  filter(type == "selected") %>%
  group_by(team) %>%
  tally() %>%
  arrange(desc(n)) %>%
  select(Team = team, Count = n)
```

## Most Selected And Delisted Players

::: panel-tabset

## Selected
```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  filter(type == "selected") %>%
  group_by(player_name) %>%
  tally() %>%
  arrange(desc(n)) %>%
  transmute(Player = player_name, Type = "Selected", Count = n) %>%
  ungroup() %>%
  arrange(desc(Count)) %>%
  head(15)
```

## Delisted
```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  filter(type == "delisted") %>%
  group_by(player_name) %>%
  tally() %>%
  arrange(desc(n)) %>%
  transmute(Player = player_name, Type = "Delisted", Count = n) %>%
  ungroup() %>%
  arrange(desc(Count)) %>%
  head(15)
```

:::

## Most Selected And Delisted Players By Team

::: panel-tabset

## Selected
```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  filter(type == "selected") %>%
  group_by(team, player_name) %>%
  tally() %>%
  group_by(team) %>%
  arrange(desc(n)) %>%
  slice(1) %>%
  select(Team = team, Player = player_name, Count = n) %>%
  ungroup() %>%
  arrange(desc(Count))
```

## Delisted
```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  filter(type == "delisted") %>%
  group_by(team, player_name) %>%
  tally() %>%
  group_by(team) %>%
  arrange(desc(n)) %>%
  slice(1) %>%
  select(Team = team, Player = player_name, Count = n) %>%
  ungroup() %>%
  arrange(desc(Count))
```

:::

## Best FA Selections

::: panel-tabset

## By Overall Avg

```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  arrange(date) %>%
  group_by(team, player_name) %>%
  filter(row_number() == n()) %>%
  ungroup() %>%
  filter(type == "selected") %>%
  arrange(desc(`Avg Points`)) %>%
  transmute(Date = date,
         Team = team,
         Player = player_name,
         `Avg Points` = round(`Avg Points`, 2),
         Games = games_played
         ) %>%
  filter(Player != "Tim English") %>%
  head(15)
  

```

## By Ranking

```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  arrange(date) %>%
  group_by(team, player_name) %>%
  filter(row_number() == n()) %>%
  ungroup() %>%
  filter(type == "selected") %>%
  arrange(ranking) %>%
  select(
    Date = date,
    Team = team,
    Player = player_name,
    Rank = ranking,
    `Z-Score` = z_score,
    Games = games_played
  ) %>%
  filter(Player != "Tim English") %>%
  head(15)
  

```

:::

## Worst Delistings

::: panel-tabset

## By Overall Avg

```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  arrange(date) %>%
  group_by(team, player_name) %>%
  filter(row_number() == n()) %>%
  ungroup() %>%
  filter(type == "delisted") %>%
  arrange(desc(`Avg Points`)) %>%
  transmute(Date = date,
         Team = team,
         Player = player_name,
         `Avg Points` = round(`Avg Points`, 2),
         Games = games_played
         ) %>%
  filter(Player %notin% c("Tim English", "Darcy Parish", "Brodie Grundy", "Dyson Heppell")) %>%
  head(15)

```

## By Ranking

```{r}
#| echo: false
#| warning: false
#| message: false

all_transactions %>%
  arrange(date) %>%
  group_by(team, player_name) %>%
  filter(row_number() == n()) %>%
  ungroup() %>%
  filter(type == "delisted") %>%
  arrange(ranking) %>%
  select(
    Date = date,
    Team = team,
    Player = player_name,
    Rank = ranking,
    `Z-Score` = z_score,
    Games = games_played
  ) %>%
  filter(Player %notin% c("Tim English", "Darcy Parish", "Brodie Grundy", "Dyson Heppell", "Oscar McInerney", "Rhys Stanley", "Shaun Higgins", "Jordan De Goey")) %>%
  head(15)

```

:::

